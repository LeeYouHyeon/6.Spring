package com.koreait.www.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.koreait.www.domain.BoardVO;
import com.koreait.www.domain.PagingVO;
import com.koreait.www.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequestMapping("/board/*")
@Slf4j
@RequiredArgsConstructor
@Controller
public class BoardController {
	// 생성자 주입 시 @RequiredArgsConstructor 사용, 멤버 변수는 반드시 final
	private final BoardService bsv;
	
	// servlet path case를 method 형식으로 사용
	// return값이 가야 하는 주소
	
	// /board/register => jsp에서 controller로 오는 경로
	// return 주소(jsp 파일)와 request의 주소가 같을 경우 생략 가능
	@GetMapping("/register")
	public void register() {}
//	@GetMapping("/register")
//	public String register() {
//		return "/board/register";
//	}
	
	private void printLog(String logTitle, int isOk) {
		log.info(">>>> {} {}", logTitle, isOk > 0 ? "성공" : "실패");
	}
	
	@PostMapping("/insert")
	public String insert(BoardVO bvo) {
		log.info(">>>> bvo >> {}", bvo);
		printLog("insert", bsv.insert(bvo));
		return "redirect:/board/list";
	}
	
	@GetMapping("/list")
	public void list(Model m) {
		PagingVO pgvo = new PagingVO(); // 1, 10 => 0, 10
		
		log.info(">>>> list");
		m.addAttribute("list", bsv.getList(pgvo));
	}
	
	// isUpdate를 wrapper class로 받아 null을 받을 수 있게 함
	@GetMapping({"/detail", "/modify"})
	public void detail(@RequestParam("bno") long bno, Boolean isUpdate, Model m, HttpServletRequest request) {
		log.info(">>>> uri >> {}", request.getRequestURI()); // /board/detail ? /board/modify
		log.info(">>>> bno >> " + bno);
		boolean isIncrease = isUpdate == null && request.getRequestURI().equals("/board/detail");
		log.info(">>>> isUpdate >> {}", isUpdate != null);
		BoardVO bvo = bsv.getDetail(bno, isIncrease);
		log.info(">>>> bvo >> {}", bvo);
		m.addAttribute("bvo", bvo);
	}
	
	// RedirectAttributes
	@PostMapping("/update")
	public String update(BoardVO bvo, RedirectAttributes ra) {
		log.info(">>>> update bvo >> {}", bvo);
		printLog("update", bsv.update(bvo));
		
		// 파라미터를 붙여서 리턴하는 방법 2가지
		// 1. 파라미터를 직접 다는 방법
		// return "redirect:/board/detail?bno=" + bvo.getBno();
		// 2. 객체에 저장하는 방법 : RedirectAttribute
		ra.addAttribute("bno", bvo.getBno());
		ra.addAttribute("isUpdate", true); // isUpdate에 null이 아닌 무언가를 담기 위한 작업. 값 자체엔 의미가 없다.
		return "redirect:/board/detail";
	}
	
	@GetMapping("/delete")
	public String delete(long bno) {
		log.info(">>>> delete bno >> " + bno);
		printLog("delete", bsv.delete(bno));
		return "redirect:/board/list";
	}
}
