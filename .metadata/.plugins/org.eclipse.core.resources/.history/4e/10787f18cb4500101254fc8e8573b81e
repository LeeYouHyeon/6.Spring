package com.koreait.www.security;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.WebAttributes;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.savedrequest.HttpSessionRequestCache;
import org.springframework.security.web.savedrequest.RequestCache;
import org.springframework.security.web.savedrequest.SavedRequest;

import com.koreait.www.repository.UserDAO;

public class LoginSuccessHandler implements AuthenticationSuccessHandler {
	
	@Autowired
	private UserDAO udao;
	
	// redirect로 데이터를 가지고 리다이렉트 경로로 이동
	private RedirectStrategy redStr = new DefaultRedirectStrategy();
	
	// 세션의 캐시 정보
	private RequestCache reqCache = new HttpSessionRequestCache();

	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {
		// 1. lastLogin 기록 => 로그인 후 가야 하는 경로 설정
		// authentication => username => getName()
		String authEmail = authentication.getName();
		int isOk = udao.updateLastLogin(authEmail);
		
		// 2. 세션에서 기존의 로그인 실패 기록 삭제 : 시큐리티에서 로그인을 시도해서 실패하면 실패 기록이 남게 됨
		HttpSession ses = request.getSession();
		if (ses != null) ses.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
		
		// 3. 로그인 직전 url로 연결
		SavedRequest saveRequest = reqCache.getRequest(request, response);
		redStr.sendRedirect(request, response, saveRequest == null ? "/board/list" : saveRequest.getRedirectUrl());
		
	}

}
